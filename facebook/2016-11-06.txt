http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=208044&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D2%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

1. level order traversal，打印出每层最大的两个数字，如果不到2个，就打印null.

struct TreeNode {
  TreeNode* left;
  TreeNode* right;
  int val;
};
int levelprint(TreeNode* root) {
  // use bfs
  list<TreeNode*> lt0body, lt1body;
  list<TreeNode*> *lt0 = &lt0body;
  list<TreeNode*> *lt1 = &lt1body;
  
  lt0->push_back(root);
  int max0 = INT_MIN, max1 = INT_MIN;
  while (!lt0->empty()) {
    if (lt0->size() < 2) {
      cout << "NULL" << endl;
      for (auto tempnode : *lt0) {
        if (tempnode->left != nullptr) {
          lt1->push_back(tempnode->left);
        }
        if (tempnode->right != nullptr) {
          lt1->push_back(tempnode->right);
        }
      }
      lt0->clear();
      swap(lt0, lt1);
    }
    else {
      max0 = INT_MIN; 
      max1 = INT_MIN;
      for (auto tempnode : *lt0) {
        if (tempnode->val >= max0) {
          swap(max0, max1);
          max0 = tempnode->val;
        }
        else if (tempnode->val > max1) {
          max1 = tempnode->val;
        }
        if (tempnode->left != nullptr) {
          lt1->push_back(tempnode->left);
        }
        if (tempnode->right != nullptr) {
          lt1->push_back(tempnode->right);
        }
      }
      cout << max0 << " " << max1 << endl;
      lt0->clear();
      swap(lt0, lt1);
    }
  }
  return 0;
}

2. random return number according to weight
int randnum(vector<int>& nums, vector<int>& weights) {
  int size = nums.size();
  vector<int> presum(size, 0);
  presum[0] = weights[0];
  for (int i = 1; i < size; ++i) {
    presum[i] = presum[i-1] + weights[i];
  }
  // generate a number between [1, presum[size-1]], number locate in (presum[i-1], presum[i]] means nums[i], where 
  // we assume presum[-1] to be 0.
  srand(time(nullptr));
  int rnum = rand()%presum[size-1]+1;
  int ind = binarysearch(presum, rnum);
  return nums[ind];
}

int binarysearch(vector<int>& nums, int val) {
  int size = nums.size();
  int start = 0, end = size - 1;
  while (start <= end) {
    int median = (start + end)/2;
    if (nums[median] == val) {
      return media;
    }
    else if (nums[median] > val) {
      end = median - 1;
    }
    else {
      start = median + 1;
    }
  }
  return start;
}
