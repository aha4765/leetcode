http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=208044&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D2%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

1. level order traversal，打印出每层最大的两个数字，如果不到2个，就打印null.

struct TreeNode {
  TreeNode* left;
  TreeNode* right;
  int val;
};
int levelprint(TreeNode* root) {
  // use bfs
  list<TreeNode*> lt0body, lt1body;
  list<TreeNode*> *lt0 = &lt0body;
  list<TreeNode*> *lt1 = &lt1body;
  
  lt0->push_back(root);
  int max0 = INT_MIN, max1 = INT_MIN;
  while (!lt0->empty()) {
    if (lt0->size() < 2) {
      cout << "NULL" << endl;
      for (auto tempnode : *lt0) {
        if (tempnode->left != nullptr) {
          lt1->push_back(tempnode->left);
        }
        if (tempnode->right != nullptr) {
          lt1->push_back(tempnode->right);
        }
      }
      lt0->clear();
      swap(lt0, lt1);
    }
    else {
      max0 = INT_MIN; 
      max1 = INT_MIN;
      for (auto tempnode : *lt0) {
        if (tempnode->val >= max0) {
          swap(max0, max1);
          max0 = tempnode->val;
        }
        else if (tempnode->val > max1) {
          max1 = tempnode->val;
        }
        if (tempnode->left != nullptr) {
          lt1->push_back(tempnode->left);
        }
        if (tempnode->right != nullptr) {
          lt1->push_back(tempnode->right);
        }
      }
      cout << max0 << " " << max1 << endl;
      lt0->clear();
      swap(lt0, lt1);
    }
  }
  return 0;
}

2. random return number according to weight
int randnum(vector<int>& nums, vector<int>& weights) {
  int size = nums.size();
  vector<int> presum(size, 0);
  presum[0] = weights[0];
  for (int i = 1; i < size; ++i) {
    presum[i] = presum[i-1] + weights[i];
  }
  // generate a number between [1, presum[size-1]], number locate in (presum[i-1], presum[i]] means nums[i], where 
  // we assume presum[-1] to be 0.
  srand(time(nullptr));
  int rnum = rand()%presum[size-1]+1;
  int ind = binarysearch(presum, rnum);
  return nums[ind];
}

int binarysearch(vector<int>& nums, int val) {
  int size = nums.size();
  int start = 0, end = size - 1;
  while (start <= end) {
    int median = (start + end)/2;
    if (nums[median] == val) {
      return media;
    }
    else if (nums[median] > val) {
      end = median - 1;
    }
    else {
      start = median + 1;
    }
  }
  return start;
}

10. Regular Expression Matching

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

// dynamic programming
// f[i][j] is 1 if s[0...i-1] matches p[0...j-1]
// f[0][0] is 1, since empty matches empty
// f[i][0] is 0, since p is empty for i >= 1
// f[0][1] is 0
// f[0][j] is 1 if f[0][j-2] is 1 and p[j-1] is '*' for j >= 2
// f[i][j] is 1 if p[j-1] not *, then f[i-1][j-1] == 1 and p[j-1] == '.' || p[j-1] == s[i-1]
//              if p[j-1]  is *, then f[i][j-2] == 1
//                                 or f[i-1][j] == 1 && p[j-2] == '.' || p[j-2] == s[i-1]
bool isMatch(string s, string p) {
  int ssize = s.size();
  int psize = p.size();
  
  vector<vector<int>> match(ssize+1, vector<int>(psize+1, 0));
  
  match[0][0] = 1;
  for (int j = 2; j <= psize; ++j) {
    if ((p[j-1] == '*') && (match[0][j-2] == 1)) {
      match[0][j] = 1;
    }
  }
  for (int i = 1; i <= ssize; ++i) {
    for (int j = 1; j <= psize; ++j) {
      if ((p[j-1] != '*') && (match[i-1][j-1] == 1) && (p[j-1] == '.' || p[j-1] == s[i-1])) {
        match[i][j] = 1;
      }
      if (
          (p[j-1] == '*') && 
          (
              (match[i][j-2] == 1) || 
              ((match[i-1][j] == 1) && (p[j-2] == '.' || p[j-2] == s[i-1]))
          )
         ){
        match[i][j] = 1;
      }
    }
  }
  
  return match[ssize][psize] == 1;
}

// Use recursive
// help(string& s, string& p, int si, int pi) returns true if s[0..si-1] and p[0..pi-1] match
bool help(string& s, string& p, int si, int pi) {
  if ((si == 0) && (pi == 0)) {
    return true;
  }
  
  if ((si == 0) && (pi >= 2)) {
    return help(s, p, si, pi-2) && (p[pi-1] == '*');
  }
  
  if ((si >=1) && (pi >=1)) {
    if (p[pi-1] != '*') {
      return help(s, p, si-1, pi-1) && (s[si-1] == p[pi-1] || p[pi-1] == '.');
    }
    else {
      return help(s, p, si, pi-2) || (help(s, p, si-1, pi) && ((s[si-1] == p[pi-2]) || (p[pi-2] == '.')));
    }
  }
  return false;
}

bool isMatch(string s, string p) {
  int ssize = s.size();
  int psize = p.size();
  return help(s, p, ssize, psize);
}

http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=208300&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D2%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

https://leetcode.com/problems/binary-tree-paths/

// follow up, if not a binary tree
struct TreeNode {
  int val;
  list<TreeNode*> child;
};

vector<string> pathtoleaf(TreeNode* root) {
}

int dfs(TreeNode* node, vector<string>& res, string path) {
  if (node->child.empty()) {
    path += to_string(root->val);
    res.push_back(path);
    return 0;
  }
  path += to_string(node->val);
  path += "->";
  for (auto cnode : node->child) {
    dfs(cnode, res, path);
  }
  return 0;
}

http://www.1point3acres.com/bbs/thread-208434-1-1.html
BST 的 in-order iterator. 要写的function有 next() 和 all(), next 一次return 下一个node； all() return所以剩下的。follow up是 改成 preorder 和 postorder

//In order iterator
struct TreeNode {
  int val;
  TreeNode* left;
  TreeNode* right;
};

// The code for in-order traversal is 
// visit(root->left), visit root, visit root->right

class Iterator {
  public:
    Iterator(TreeNode* root) {
      while (root != nullptr) {
        st.push(root);
        root = root->left;
      }
    }
  
    TreeNode* next() {
      if (st.empty()) return nullptr;
      TreeNode* cur = st.top();
      st.pop();
      TreeNode* temp = cur->right;
      while (temp != nullptr) {
        st.push(temp);
        temp = temp->left;
      }
      return cur;
    }
    vector<TreeNode*> all() {
      vector<TreeNode*> res;
      TreeNode* cur;
      while ((cur = next()) != nullptr) {
        res.push_back(cur);
      }
      return res;
    }
    
  private:
    stack<TreeNode*> st;
};

// The code for pre-order traversal is 
// visit root, visit(root->left), visit root->right

class Iterator {
  public:
    Iterator(TreeNode* root) {
      if (root != nullptr) {
        st.push(root);
      }
    }
  
    TreeNode* next() {
      if (st.empty()) return nullptr;
      TreeNode* cur = st.top();
      st.pop();
      if (cur->right != nullptr) {
        st.push(cur->right);
      }
      if (cur->left != nullptr) {
        st.push(cur->left);
      }
      return cur;
    }
    vector<TreeNode*> all() {
      vector<TreeNode*> res;
      TreeNode* cur;
      while ((cur = next()) != nullptr) {
        res.push_back(cur);
      }
      return res;
    }
    
  private:
    stack<TreeNode*> st;
};

// The code for pre-order traversal is 
// visit visit(root->left), visit root->right, root

class Iterator {
  public:
    Iterator(TreeNode* root) {
      while (root != nullptr) {
        st.push(root);
        if (root->left) {
          root = root->left;
        }
        else if (root->right) {
          root = root->right;
        }
      }
    }
  
    TreeNode* next() {
      if (st.empty()) return nullptr;
      TreeNode* cur = st.top();
      st.pop();
      if (!st.empty()) {
        if (cur == st.top()->left) {
          TreeNode* temp = st.top()->right;
          while (temp != nullptr) {
            st.push(temp);
            if (temp->left) {
              temp = temp->left;
            }
            else if (temp->right) {
              temp = temp->right;
            }
          }
        }
      }
      return cur;
    }
    vector<TreeNode*> all() {
      vector<TreeNode*> res;
      TreeNode* cur;
      while ((cur = next()) != nullptr) {
        res.push_back(cur);
      }
      return res;
    }
    
  private:
    stack<TreeNode*> st;
};

http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=175749&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D2%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

// merge sort
int mergesort(vector<int>& nums, int start, int end) {
  if (start < end) {
    int median = (start+end)/2;
    mergesort(nums, start, median);
    mergesort(nums, median+1, end);
    merge(nums, start, median, end);
  }
  return 0;
}

// merge nums[start...mid] and nums[mid+1...end]
int merge(vector<int>&nums, int start, int mid, int end) {
  vector<int> temp(mid-start+1, 0);
  for (int i = 0; i < mid-start+1; ++i) {
    temp[i] = nums[i+start];
  }
  
  int dest = start, li = 0, ri = mid+1;
  while ((li < mid-start+1) && (ri <= end)) {
    if (temp[li] < nums[ri]) {
      nums[dest++] = temp[li++];
    }
    else {
      nums[dest++] = nums[ri++];
    }
  }
  while (li < mid-start+1) {
    nums[dest++] = temp[li++];
  }
  return 0;
}

// quick sort
int quicksort(vector<int>& nums, int start, int end) {
  if (start < end) {
    int pos = partition(nums, start, end);
    quicksort(nums, start, pos-1);
    quicksort(nums, pos+1, end);
  }
  return 0;
}

int partition(vector<int>& nums, int start, int end) {
  int pivot = nums[start];
  int i = start+1, j = end;
  while (i <= j) {
    while ((nums[i] <= pivot) && (i <= j)) {
      i++;
    }
    while ((nums[j] > pivot) && (i <= j)) {
      j--;
    }
    if (i < j) {
      swap(nums[i++], nums[j--]);
    }
  }
  swap(nums[start], nums[j]);
  return j;
  
  or
  int pivot = nums[end];
  int left = start;
  for (int i = start; i < end; ++i) {
    if (nums[i] <= pivot) {
      swap(nums[left++], nums[i]);
    }
  }
  swap(nums[end], nums[left]);
  return left;
}
