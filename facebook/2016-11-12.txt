http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=210159&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D2%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

Define amazing number as: its value is less than or equal to its index. Given a circular array, find the starting position, such that the total number of amazing numbers in the array is maximized.
Example 1: 0, 1, 2, 3
Ouptut: 0.    When starting point at position 0, all the elements in the array are equal to its index. So all the numbers are amazing number.
Example 2: 1, 0 , 0
Output: 1.    When starting point at position 1, the array becomes 0, 0, 1. All the elements are amazing number.
If there are multiple positions, return the smallest one.

int amazenum(vector<int>& nums) {
  int size = nums.size();
  vector<int> shift(size, 0);
  
  for (int i = 0; i < size; ++i) {
    if (nums[i] >= size) {
      continue;
    }
    else if (nums[i] <= 0) {
      shift[0]++;
    }
    else if (nums[i] < i) {
      shift[0]++;
      shift[i-nums[i]+1]--;
      if (i != size-1) {
        shift[i+1]++;
      }
    }
    else {
      shift[i+1]++;
      if (nums[i] > i+1) {
        shift[size+i-nums[i]+1]--;
      }
    }
  }
  
  int sum = 0, max = -1, index = 0;
  for (int i = 0; i < size; ++i) {
    sum += shift[i];
    if (sum > max) {
      max = sum;
      index = i;
    }
  }
  
  return index;
}

Merge K sorted List.
struct Element {
  int val;
  int arr;
  Element(int v, int a) 
  : val(v), arr(a){
  }
};
vector<int> merge(vector<vector<int>>& nums) {
  int arrnum = nums.size();
  vector<int> res;
  vector<int> indarr(arrnum, 0);
  priority_queue<Element, vector<Element>, [&](Element a, Element b){return a.val > b.val;}> pq;
  
  for (int i = 0; i < arrnum, ++i) {
    pq.push(Element(nums[i][0], i));
  }
  int arrcnt = arrnum;
  while (arrcnt != 0) {
    int curval = pq.top().val;
    int arrind = pq.top().arr;
    res.push_back(curval);
    pq.pop();
    indarr[arrind]++;
    if (indarr[arrind] >= nums[arrind].size()) {
      arrcnt--;
    }
    else {
      pq.push(nums[arrind][indarr[arrind]]);
    }
  }
  return res;
}
