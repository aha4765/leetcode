http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=169347&extra=page%3D2%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D1%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

lc wiggle sort i
class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        for (int i = 0; i < nums.size(); ++i) {
            if (i%2 == 1 && nums[i] < num[i-1]) {
                swap(nums[i], nums[i-1]);
            }
            else if (i%2 == 0 && i != 0 && nums[i] > num[i-1]) {
                swap(nums[i], nums[i-1]);
            }
        }
        return;
    }
    
};

http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=169422&extra=page%3D3%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D1%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

先问x+log2(x) = 0，如何求x（浮点数），我直接懵逼了。经提醒，range在0~1之间，用维护range的二分法做

float solve() {
  float start = 0, end = 1;
  while (start <= end) {
    float med = (start+end)/2;
    if (med + log(med) < 0) {
      start = med;
    }
    else if (med + log(med) > 0) {
      end = med;
    }
    else {
      return med;
    }
  }
  return -1;
}

然后第二题是给一个整数n例如5，它能被分成2+3，积是6，也能被分成1+4，积是4，求这个整数的最大可能积。一开始我又懵逼了，我猜是分成两个数最大，小哥说不对，你看8就不是分为4+4而是应该分为2+3+3，我又继续懵逼卡住。小哥又善意地提醒我可以遍历n的分法，每次用递归找最大积，例如，8可以分为1+7，2+6，3+5，4+4，可以依次询问1，2，3，4，5，6，7的最大积。这个用个简单的递归迭代就行。然后我一脸懵逼地大概把码写了，小哥善意地给我改了改，然后follow up：这个查询被询问了太多次，如何用一个数据结构保存以前的结果？然后我懵了一会儿开始想DP的递推式，小哥直接指出不用这样你用map就行了

int findprod(int N) {
  vector<int> prod(N, -1);
  prod[0] = 1;
  prod[1] = 2;
  return help(N, prod);  
}

int help(int k, vector<int>& prod) {
  if (prod[k-1] != -1) return prod[k-1];
  int res = k;
  for (int i = 1; i < k; ++i) {
    res = max(res, help(i, prod)*help(k-i, prod));
  }
  prod[k-1] = res;
  return res;
}

unsorted array的find duplicate，任意的就行，我给了好几个办法，小哥会叫我分析每个办法的时间复杂度和空间复杂度，最后update question，数组的所有数字都在1~N的范围内，叫我在O(1)空间限制下，找一个比sort版本O(nlogn)时间更少的方法。然后我说可以尝试modify原数组，思维仍然卡在上一个hashmap的方法上面，然后小哥说能不能不modify原数组，仍然用hash的思维做，我就想啊想我觉得应该有index mapping才对，然而怎么也想不出O(1)空间的办法，小哥就提示我注意数字都在1~N范围内噢！！！然后我们一起列了几个例子分析了一下，最后发现还是一个range二分的思想，详情如下：
假设数组是3，2，1，3，6，5，4，共7个数，N=7
开始时left = 1， right = 7， mid = 4，数在left~mid范围内的数有几个，如果没有重复的话应该有mid-left个，此时走右边，如果有重复的话就会出现多于mid-left个的情况，那么应该走左边，分别相应update left，right和mid，直到最后找到重复数3。
然后我就在懵的状态下按照这个思路写了一下代码，小哥帮我指出了几个range上的问题。

int duplicate(vector<int>& nums) {
  int left = 1, right = nums.size();
  while (left <= right) {
    int med = (left + right)/2;
    int cnt = 0;
    for (int i = 0; i < nums.size(); ++i) {
      if (nums[i] <= med) {
        cnt++;
      }
    }
    if (cnt == med-left+1) {
      left = med+1;
    }
    else {
      right = med;
    }
  }
  return right;
}

http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=159564&extra=page%3D3%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D1%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

1. word break

2. two number sort

void twosort(vector<int>& nums) {
  int cnt = 0;
  for (int i = 0; i < nums.size(); ++i) {
    if (nums[i] == 0) cnt++;
  }
  for (int i = 0; i < cnt; ++i) {
    nums[i] = 0;
  }
  ....
}

http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=169484&extra=page%3D3%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D1%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

LeetCode – Pain Fence
 
There is a fence with n posts, each post can be painted with one of the k colors. You have to paint all the posts such that no more than two adjacent fence posts have the same color. Return the total number of ways you can paint the fence.

f(k) = f(k-1)*k if k-1 and k-2 has different color
     = f(k-1)*(k-1) if k-1 and k-2 has same color
     
s(k) = d(k-1)
d(k) = d(k-1)*(k-1) + s(k-1)*(k-1)

s(0) = d(0) = k
s(1) = K
d(1) = k*(k-1)

int paintfence(int N) {
  vector<int> s(2, 0);
  vector<int> d(2, 0);
  s[0] = k;
  d[0] = k*(k-1);
  for (int i = 2; i < N; ++i) {
    s[1] = d[0];
    d[1] = d[0]*(k-1) + s[0]*(k-1);
    s[0] = s[1];
    d[0] = d[1];
  }
  return s[0]+d[0];
}

http://www.geeksforgeeks.org/dynamic-programming-set-10-0-1-knapsack-problem/

N goods, W weight
consider goods from 0 to i-1 and using weights from 0 to j
dp[i][j]

dp[N+1][W+1]

dp[i][j] = 1. dp[]
