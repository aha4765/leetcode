http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=210969&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D1%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

https://leetcode.com/problems/remove-duplicate-letters/

找一个array所有有可能的sum，比如{2,3,4}有
2+3 = 5
2+4 = 6
3+4 = 7
2+3+4 = 9

vector<int> arrsum(vector<int>& nums) {
  unordered_set<int> sum;
  dfs(sum, nums, 0);
  vector<int> res;
  for (auto it = sum.begin(); it != sum.end(); ++it) {
    res.push_back(*it);
  }
  return res;
}

int dfs(unordered_set<int>& res, vector<int>& nums, int pos) {
  if (pos == nums.size()) return 0;
  for (auto temp : res) {
    res.insert(temp + nums[pos]);
  }
  for (int i = 0; i < pos; ++i) {
    res.insert(nums[i] + nums[pos]);
  }
  dfs(res, nums, pos+1);
  return 0;
}

http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=210977&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3090%5D%5Bvalue%5D%3D2%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D1%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

LeetCode – Shortest Distance from All Buildings (Java)
 
You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.

For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2). The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. So return 7.

//Use BFS

struct Pos {
  int x;
  int y;
  Pos(int xi, int yi)
  : x(xi), y(yi){
  }
};
int mindist(vector<vector<int>>& block) {
  int M = block.size();
  int N = block[0].size();
  int buildnum = 0, level = 0;
  vector<vector<int>> dist(M, vector<int>(N, 0));
  vector<vector<int>> reach(M, vector<int>(N, 0));
  vector<vector<bool>> visit(M, vector<int>(N, false));
  
  queue<Pos> q;
  for (int i = 0; i < M; ++i) {
    for (int j = 0; j < N; ++j) {
      if (block[i][j] == 1) {
        for (int i = 0; i < M; ++i) {
          for (int j = 0; j < N; ++j) {
            visit[i][j] = false;
          }
        }
        buildnum++;
        q.push(Pos(i, j));
        while (!q.empty()) {
          int qsize = q.size();          
          level++;
          for (int k = 0; k < qsize; ++k) {
            Pos pos = q.front();
            q.pop();
            visit[pos.x][pos.y] = true;
            if ((pos.x > 0) && (block[pos.x-1][pos.y] != 2) && (!visit[pos.x-1][pos.y])) {
              dist[pos.x-1][pos.y] += level;
              visit[pos.x-1][pos.y] = true;
              if (block[pos.x-1][pos.y] == 0) {
                ++reach[pos.x-1][pos.y];
              }
              q.push(Pos(pos.x-1, pos.y));
            }
            if ((pos.x < M-1) && (block[pos.x+1][pos.y] != 2) && (!visit[pos.x+1][pos.y])) {
              dist[pos.x+1][pos.y] += level;
              visit[pos.x+1][pos.y] = true;
              if (block[pos.x+1][pos.y] == 0) {
                ++reach[pos.x+1][pos.y];
              }
              q.push(Pos(pos.x+1, pos.y));
            }
            if ((pos.y > 0) && (block[pos.x][pos.y-1] != 2) && (!visit[pos.x][pos.y-1])) {
              dist[pos.x][pos.y-1] += level;
              visit[pos.x][pos.y-1] = true;
              if (block[pos.x][pos.y-1] == 0) {
                ++reach[pos.x][pos.y-1];
              }
              q.push(Pos(pos.x, pos.y-1));
            }
            if ((pos.y < N-1) && (block[pos.x][pos.y+1] != 2) && (!visit[pos.x][pos.y+1])) {
              dist[pos.x][pos.y+1] += level;
              visit[pos.x][pos.y+1] = true;
              if (block[pos.x][pos.y+1] == 0) {
                ++reach[pos.x][pos.y+1];
              }
              q.push(Pos(pos.x, pos.y+1));
            }
          }
        }
      }
    }
  }
  
  int mindest = INT_MAX;
  for (int i = 0; i < M; ++i) {
    for (int j = 0; j < N; ++j) {
      if ((reach[i][j] == buildnum) && (dist[i][j] < mindest)) {
        mindest = dist[i][j];
      }
    }
  }
  return mindest;
}
