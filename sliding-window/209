Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 


class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        start, end = 0, 0
        cursum = 0
        length = len(nums)
        ret = length+1
        for end in range(length):
            cursum += nums[end]
            while cursum >= s and start <= end:
                ret = min(ret, end-start+1)
                cursum -= nums[start]
                start += 1
        if ret > length:
            return 0
        return ret
